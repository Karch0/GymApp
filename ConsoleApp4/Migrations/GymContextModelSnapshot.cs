// <auto-generated />
using System;
using ConsoleApp4.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsoleApp4.Migrations
{
    [DbContext(typeof(GymContext))]
    partial class GymContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsoleApp4.Models.Data.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("GymLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GymLocationId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.GymLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("GymLocations");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GymLocationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInStreak")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionPrice")
                        .HasColumnType("int");

                    b.Property<int>("VisitationCounter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("GymLocationId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.Client", b =>
                {
                    b.HasOne("ConsoleApp4.Models.Data.Coach", "Coach")
                        .WithMany("Clients")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.Coach", b =>
                {
                    b.HasOne("ConsoleApp4.Models.Data.GymLocation", "GymLocation")
                        .WithMany("Coaches")
                        .HasForeignKey("GymLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymLocation");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.Subscription", b =>
                {
                    b.HasOne("ConsoleApp4.Models.Data.Client", "Client")
                        .WithOne("Subscription")
                        .HasForeignKey("ConsoleApp4.Models.Data.Subscription", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp4.Models.Data.GymLocation", "GymLocation")
                        .WithMany("Subscriptions")
                        .HasForeignKey("GymLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("GymLocation");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.Client", b =>
                {
                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.Coach", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ConsoleApp4.Models.Data.GymLocation", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
